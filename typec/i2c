#!/usr/bin/perl

use strict;

description("Read TCA/TCPC regs");
autodie();

sub usage {
    my $exit_code = shift;

    print <<EOF;
usage: $SCRIPT <tca|tcpc> [value] <reg>

Do i2c read/write to TCA or TCPC block.

Options:
    tca     R/W to TCA block

    tcpc    R/W to TCPC block

    reg     Register offset

    value   Value to write to register. If not
            specify, then only do READ operation.
            If specified, then do WRITE operation.
            
For example:
To read TCA block:
 \$ typec i2c TCA 0x1a

To write to TCPC block
 \$ typec i2c TCPC 12 0xaa

EOF

    exit $exit_code;
}

#my $PCI_SYSFS='/sys/devices/pci0000:00/0000:00:01.0/0000:01:00.2';
my $TCPC='1';
my $TCA='0';

sub do_completion {
    my $comp_line = <STDIN>;
    my @args = split /\s+/, $comp_line, -1;

    exit(0) if (@args < 1);

    my $partial_cmd = $args[@args - 1];
    exit(0) if (!defined $partial_cmd);

    my @cmds = grep { m/^$partial_cmd/ } ('tca', 'tcpc');

    print join(' ', @cmds);
    exit 0;
}

sub i2c_read {
    my $arg = shift;
    my $reg = shift;

    chomp $reg;

    my $TC_DEBUGFS = typec_debugfs();

    if ($arg eq 'tcpc') {
        system("sudo echo -n -e ${TCPC}r$reg\\\\0 > $TC_DEBUGFS/i2c");
        cmd("cat $TC_DEBUGFS/i2c");
    } elsif ($arg eq 'tca') {
        system("sudo echo -n -e ${TCA}r$reg\\\\0 > $TC_DEBUGFS/i2c");
        cmd("cat $TC_DEBUGFS/i2c");
    } else {
        usage(1);
    }
}

sub i2c_write {
    my $arg = shift;
    my $value = shift;
    my $reg = shift;

    chomp $reg;
    chomp $value;

    my $TC_DEBUGFS = typec_debugfs();

    if ($arg eq 'tcpc') {
        system("sudo echo -n \"${TCPC}w$reg $value\" > $TC_DEBUGFS/i2c");
        cmd("cat $TC_DEBUGFS/i2c");
    } elsif ($arg eq 'tca') {
        system("sudo echo -n \"${TCA}w$reg $value\" > $TC_DEBUGFS/i2c");
        cmd("cat $TC_DEBUGFS/i2c");
    } else {
        usage(1);
    }
}

sub main {
    my $num_arg = $#ARGV + 1;

    if ($ARGV[0] eq "completion") {
        do_completion();
    }

    usage(0) if $num_arg < 2;

    run_as_root();

    if ($num_arg == 2) {
        i2c_read(@ARGV);
    } elsif ($num_arg == 3) {
        i2c_write(@ARGV);
    } else {
        usage(0);
    }
}

main();
